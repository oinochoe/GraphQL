import{NOTE_FRAGMENT}from"./fragments";import{GET_NOTES}from"./queries";export const defaults={notes:[{__typename:"Note",id:1,title:"First",content:"Second"}]};export const typeDefs=["\n    schema {\n        query: Query\n        mutation: Mutation\n    }\n    type Query {\n        notes: [Note]!\n        note(id: Int!): Note\n    }\n    type Mutation{\n        createNote(title: String!, content: String!): Note\n        editNote(id: Int!, title: String, content:String): Note\n    }\n    type Note{\n        id: Int!\n        title: String!\n        content: String!\n    }\n    "];export const resolvers={Query:{note:(_,variables,{cache:cache})=>{const id=cache.config.dataIdFromObject({__typename:"Note",id:variables.id}),note=cache.readFragment({fragment:NOTE_FRAGMENT,id:id});return note}},Mutation:{createNote:(_,variables,{cache:cache})=>{const{notes:notes}=cache.readQuery({query:GET_NOTES}),{title:title,content:content}=variables,newNote={__typename:"Note",title:title,content:content,id:notes.length+1};return cache.writeData({data:{notes:[newNote,...notes]}}),newNote},editNote:(_,{id:id,title:title,content:content},{cache:cache})=>{const noteId=cache.config.dataIdFromObject({__typename:"Note",id:id}),note=cache.readFragment({fragment:NOTE_FRAGMENT,id:noteId}),updatedNote={...note,title:title,content:content};return cache.writeFragment({id:noteId,fragment:NOTE_FRAGMENT,title:title,content:content,data:updatedNote}),updatedNote}}};